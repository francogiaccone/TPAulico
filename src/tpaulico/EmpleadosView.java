package tpaulico;

import javax.swing.table.DefaultTableModel;

public class EmpleadosView extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {
        
        @Override
        public boolean isCellEditable(int f, int c) {
            
            return false;
            
        }
    };
    
    public EmpleadosView() {
        initComponents();
        crearCabecera();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtEmpresa = new javax.swing.JTable();
        jcbEmpresas = new javax.swing.JComboBox<>();

        setClosable(true);

        jLabel1.setText("Empleados");

        jtEmpresa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtEmpresa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jcbEmpresas, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbEmpresas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<Empresa> jcbEmpresas;
    private javax.swing.JTable jtEmpresa;
    // End of variables declaration//GEN-END:variables

    private void crearCabecera() {
        
        modelo.addColumn("Nombre y Apellido");
        modelo.addColumn("Documento");
        modelo.addColumn("CategorÃ­a");
        modelo.addColumn("Sueldo");
        jtEmpresa.setModel(modelo);
    }
    
    private void cargarCombo() {
        for (Empresa empresa: EscritorioView.empresas) {
            jcbEmpresas.addItem(empresa);
        }
    }
    
    private void mostrarFilas(Empresa empresa) {
        borrarFilas();
        
        for (Empleado empleado : empresa.getEmpleados()) {
            modelo.addRow(new Object[] {empleado.getNombreApellido(), empleado.getDni(), empleado.getCategoria(), "$" + empleado.getSueldo()});
        }
    }
    
    private void borrarFilas() {
        int filasActuales = modelo.getRowCount()-1;
        
        for (int i = filasActuales; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
}
